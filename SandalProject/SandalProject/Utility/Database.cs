using Microsoft.AspNetCore.Mvc;
using SandalProject.Models;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Text.RegularExpressions;

namespace SandalProject.Utility
{
    public class Database
    {
        private bool _creato = false;

        public bool Creato { get => _creato; }

        private SqlConnection Connection { get; set; }
        private static Database instance = null;

        private string nomeDB = "master";

        private Database(string nomeDB, string server = "localhost")
        {
            this.nomeDB = nomeDB;

            Connection = new SqlConnection($"Server={server};Integrated security=true;");
            //connessione al db master
            try
            {//controllo di esistenza del db richiesto
                Connection.Open();
                SqlCommand cmd = new SqlCommand($"USE {nomeDB}", Connection);
                cmd.ExecuteNonQuery();
                _creato = true;
            }
            catch (Exception ex)
            {//se il db non esiste, genera un eccezione, allora lo creiamo
                Console.WriteLine("creazione db in corso");
                string query = $"CREATE DATABASE {nomeDB}";
                SqlCommand cmd = new SqlCommand(query, Connection);
                cmd.ExecuteNonQuery();
                cmd = new SqlCommand($"USE {nomeDB}", Connection);
                cmd.ExecuteNonQuery();
                Connection.Close();
                //connessione al nostro db
                Connection = new SqlConnection($"Server={server};Database={nomeDB};Integrated security=true;");
                try
                { //creazione delle tabelle
                    CreaTabelle();
                }
                catch
                {
                    Console.WriteLine("Errore durante la creazione delle tabelle: " + ex.Message);
                }
                //il db non era già creato in precedenza
                _creato = false;
            }
            finally
            {
                Connection.Close();//precauzione
                                   //aggiorna la connessione da master a db corrente se necessario
                Connection = new SqlConnection($"Server=localhost;Database={nomeDB};Integrated security=true;");
            }
        }

        public static Database GetInstance()
        {
            if (instance == null)
                instance = new Database("ProjectSandal");

            return instance;
        }

        public List<Dictionary<string, string>> Read(string query)
        {
            List<Dictionary<string, string>> ris = new List<Dictionary<string, string>>();

            using (SqlConnection conn = new SqlConnection(Connection.ConnectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(query, conn);
                using (SqlDataReader dr = cmd.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        Dictionary<string, string> riga = new Dictionary<string, string>();

                        for (int i = 0; i < dr.FieldCount; i++)
                        {
                            var columnName = dr.GetName(i).ToLower();
                            object columnValue = dr.GetValue(i);

                            if (columnValue is byte[] byteArray)
                            {
                                string byteValues = BitConverter.ToString(byteArray);
                                riga.Add(columnName, byteValues);
                            }
                            else
                            {
                                riga.Add(columnName, columnValue.ToString());
                            }
                        }

                        ris.Add(riga);
                    }
                }
            }

            return ris;
        }

        public Dictionary<string, string> ReadOne(string query)
        {
            try
            {
                return Read(query)[0];
            }
            catch
            {
                return null;
            }
        }

        public bool Update(string query)
        {
            try
            {
                Connection.Open();
                //Console.WriteLine("connessione a:" + Connection.Database);

                SqlCommand cmd = new SqlCommand(query, Connection);
                //Statistiche(Connection,query);

                int affette = cmd.ExecuteNonQuery();

                //Console.WriteLine("Righe affette: " + affette);

                return affette > 0;
            }
            catch (SqlException e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine($"\nQUERY ERRATA:\n{query}");

                return false;
            }
            catch (Exception e)
            {
                Console.WriteLine("Errore generico" + "\n" + e.Message);
                return false;
            }
            finally
            {
                Connection.Close();
            }
        }

        public void Statistiche(SqlConnection connection, string query = "")
        {
            Console.WriteLine($"{connection.State}\t {connection.Database}\t {connection.DataSource}"); //\t{(query = query == "" ? "query non trovata" : query)}
            //Console.ReadKey();
        }

        public void DropDB(string query, string server = "localhost")
        {
            Connection = new SqlConnection($"Server={server};Database=master;Integrated security=true;");
            try
            {
                Connection.Open();
                //Console.WriteLine("connessione a:" + Connection.Database);

                string closeConnectionsQuery = $"ALTER DATABASE {nomeDB} SET SINGLE_USER WITH ROLLBACK IMMEDIATE;";
                SqlCommand cmd = new SqlCommand(closeConnectionsQuery, Connection);
                cmd.ExecuteNonQuery();
                //Statistiche(Connection,query);

                cmd = new SqlCommand(query, Connection);
                cmd.ExecuteNonQuery();
            }
            catch (SqlException e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine($"\nQUERY ERRATA:\n{query}");
            }
            catch (Exception e)
            {
                Console.WriteLine("Errore generico" + "\n" + e.Message);
            }
            finally
            {
                Connection.Close();
            }
        }

        private void CreaTabelle()
        {
            //query creazione tabelle
            Update("create table Account\r\n(\r\n\tid int primary key identity(1,1),\r\n\tpropic varbinary(max),\r\n\tusername varchar(50),\r\n\temail varchar(50),\r\n\tpsw varchar(200),\r\n\truolo varchar(20),\r\n\tpfedelta int\r\n);");
            Update("create table Sandali\r\n(\r\n\tid int primary key identity(1,1),\r\n\tnome varchar(50),\r\n\tmarca varchar(50),\r\n\tdescrizione varchar(1000),\r\n\tprezzo decimal,\r\n\tSKU varchar(100),\r\n\tcategoria varchar(20),\r\n\tgenere varchar(10),\r\n\tsconto decimal,\r\n\tquantita int,\r\n\ttaglia int,\r\n\timmagine1 varbinary(max),\r\n\timmagine2 varbinary(max),\r\n\timmagine3 varbinary(max),\r\n\timmagine4 varbinary(max),\r\n\tcolore varchar(10));");
            Update("create table Carrello\r\n(\r\n\tid int primary key identity(1,1),\r\n\tidAccount int,\r\n\tFOREIGN KEY(idAccount) REFERENCES Account(id) \r\n\tON UPDATE CASCADE ON DELETE SET NULL,\r\n\tidSandali int,\r\n\tFOREIGN KEY(idSandali) REFERENCES Sandali(id) \r\n\tON UPDATE CASCADE ON DELETE SET NULL);");
            Update("create table Wishlist\r\n(\r\n\tid int primary key identity(1,1),\r\n\tidAccount int,\r\n\tFOREIGN KEY(idAccount) REFERENCES Account(id) \r\n\tON UPDATE CASCADE ON DELETE SET NULL,\r\n\tidSandali int,\r\n\tFOREIGN KEY(idSandali) REFERENCES Sandali(id) \r\n\tON UPDATE CASCADE ON DELETE SET NULL,\r\n\tskuSandali varchar(100) );");

            Update("Insert into Account\r\n(Propic, Username, Email, Psw, Ruolo, PFedelta)\r\nValues \r\n(r\n'username',\r\n'default@default.com',\r\nHASHBYTES('SHA2_512','password'),\r\n'user',\r\n0);");
            Update("Insert into Account\r\n(Propic, Username, Email, Psw, Ruolo, PFedelta)\r\nValues \r\n(r\n'username',\r\n'admin@default.com',\r\nHASHBYTES('SHA2_512','ciao'),\r\n'admin',\r\n0);");
        }
        public bool InsertSandalo(string nome, string marca, string query, string descrizione, double? prezzo, string categoria, string genere, double? sconto, int? quantita, int? taglia, System.Data.SqlTypes.SqlBinary immagineSqlBinary1, System.Data.SqlTypes.SqlBinary immagineSqlBinary2, System.Data.SqlTypes.SqlBinary immagineSqlBinary3, System.Data.SqlTypes.SqlBinary immagineSqlBinary4, string sku, string colore)
        {
            try
            {
                Connection.Open();

                SqlCommand cmd = new SqlCommand(query, Connection);

                // Aggiungi i parametri per le immagini binarie (immagine1, immagine2, ecc.)
                cmd.Parameters.Add("@Immagine1", SqlDbType.VarBinary).Value = immagineSqlBinary1;
                cmd.Parameters.Add("@Immagine2", SqlDbType.VarBinary).Value = immagineSqlBinary2;
                cmd.Parameters.Add("@Immagine3", SqlDbType.VarBinary).Value = immagineSqlBinary3;
                cmd.Parameters.Add("@Immagine4", SqlDbType.VarBinary).Value = immagineSqlBinary4;

                // Aggiungi tutti gli altri parametri, gestendo i valori null
                cmd.Parameters.Add("@Sku", SqlDbType.NVarChar).Value = sku ?? (object)DBNull.Value;
                cmd.Parameters.Add("@Colore", SqlDbType.NVarChar).Value = colore ?? (object)DBNull.Value;
                cmd.Parameters.Add("@nome", SqlDbType.NVarChar).Value = nome ?? (object)DBNull.Value;
                cmd.Parameters.Add("@marca", SqlDbType.NVarChar).Value = marca ?? (object)DBNull.Value;
                cmd.Parameters.Add("@descrizione", SqlDbType.NVarChar).Value = descrizione ?? (object)DBNull.Value;
                cmd.Parameters.Add("@categoria", SqlDbType.NVarChar).Value = categoria ?? (object)DBNull.Value;
                cmd.Parameters.Add("@genere", SqlDbType.NVarChar).Value = genere ?? (object)DBNull.Value;
                cmd.Parameters.Add("@prezzo", SqlDbType.Decimal).Value = prezzo ?? (object)DBNull.Value;
                cmd.Parameters.Add("@sconto", SqlDbType.Decimal).Value = sconto ?? (object)DBNull.Value;
                cmd.Parameters.Add("@quantita", SqlDbType.Int).Value = quantita ?? (object)DBNull.Value;
                cmd.Parameters.Add("@taglia", SqlDbType.Int).Value = taglia ?? (object)DBNull.Value;


                int affette = cmd.ExecuteNonQuery();

                return affette > 0;
            }
            catch (SqlException e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine($"\nQUERY ERRATA:\n{query}");

                return false;
            }
            catch (Exception e)
            {
                Console.WriteLine("Errore generico" + "\n" + e.Message);
                return false;
            }
            finally
            {
                Connection.Close();
            }
        }
    }
}
